function minimax(position, depth, maximizingPlayer)
  if depth == 0 or game over in position 
    return static evaluation of position
  // check to see if the game is over == highest min/max value
  // if we check this first and switch players every time does that mean whichever player it is just lost. so the scores need to be reversed

  if maximizingPlayer 
    maxEval = -infinity
    for each child of position
      eval = minimax(child, depth-1, false)
      maxEval = max(maxEval, eval)
    return maxEval
    // if its the max player's turn, find the turn that will grant them the highest score by calling the function recursively (which plays out both players' potential moves)

  else 
    minEval = +infinity
    for each child of position
      eval = minimax(child, depth-1, true)
      minEval = min(minEval, eval)
    return minEval
    // else the min player will be looking to make the move with the lowest score value


// with pruning (works best if you somehow order the moves from most likely to be good to least likely)
function minimax(position, depth, alpha, beta, maximizingPlayer)
  if depth == 0 or game over in position 
    return static evaluation of position
  // check to see if the game is over == highest min/max value

  if maximizingPlayer 
    maxEval = -infinity
    for each child of position
      eval = minimax(child, depth-1, alpha, beta, false)
      maxEval = max(maxEval, eval)
      alpha = max(alpha, eval)
      if beta <= alpha
        break
    return maxEval
    // so alpha is the current highest score that the maxing player can pick. if the new tree (/mins best choice/beta) is evaluated to be less than the alpha/max's best choice then we can skip the rest of the tree because max won't pick it anyway/already has a better choice evaluated

  else 
    minEval = +infinity
    for each child of position
      eval = minimax(child, depth-1, alpha, beta, true)
      minEval = min(minEval, eval)
      beta = min(beta, eval)
      if beta <= alpha
        break
    return minEval
    // vice versa to the alpha beta/if min already has a better choice than what was just evaluated then ignore the rest of the tree because it cant be any better than what min has now because max wouldn't pick any other better option for min do we get it